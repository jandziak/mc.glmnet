library(mc.glmnet)
library("mc.glmnet", lib.loc="~/R/win-library/3.1")
library(devtools) devtools::document()
library(devtools)
devtools::document()
?mcnemar.test
library(mc.glmnet)
?mc.glmnet
?mc.glmnet-package
library(mc.glmnet)
?mc.glmnet-package
?mc.glmnet-package
??mc.glmnet
?mc.glmnet-package
frac <- 0.1
p <- c(1000, 2000, 3000, 4000)
n <- c(50, 100, 200)
# Here are two switches p i n
prec <- ggm.simulate.pcor(p[1],frac)
library(GeneNet)
prec <- ggm.simulate.pcor(p[1],frac)
data_ <- sapply(n, function(x) ggm.simulate.data(x, prec))
names(data_) <-1:3
var_mats<- lapply(names(data_), function(x) var(data_[[x]]))
data_$1
data_ <- sapply(n, function(x) ggm.simulate.data(x, prec))
data_
data_$X
data_$Y
data <- sapply(n, function(x) ggm.simulate.data(x, prec))
data <- ggm.simulate.data(x, prec)
data <- ggm.simulate.data(n[1], prec)
data$
1
data[1]
data[[1]]
n <- c(50, 100, 200)
data <- ggm.simulate.data(n[1], prec)
d$X <- 1
d <- list{}
d <- list[]
d <- list()
d$X <-1
d$Y <-1
graph.data.generate <- function(fraction = 0.1, p = 1000, n = 100, b.values = rep(2,50)){
graph.data.generate <- function(fraction = 0.1, p = 1000, n = 100, b.values = rep(2,50)){
data <- list()
precision <- ggm.simulate.pcor(p,fraction)
data$X <- ggm.simulate.data(n, prec)
beta <- c(b.values,rep(0,times=p-length(b.values)))
probs <- round(1/(1+(exp(-X%*%beta))),digits=4)
Y <- rbinom(n,1,probs))
return(data)
}
graph.data.generate <- function(fraction = 0.1, p = 1000, n = 100, b.values = rep(2,50)){
data <- list()
precision <- ggm.simulate.pcor(p,fraction)
data$X <- ggm.simulate.data(n, prec)
beta <- c(b.values,rep(0,times=p-length(b.values)))
probs <- round(1/(1+(exp(-X%*%beta))),digits=4)
data$Y <- rbinom(n,1,probs)
return(data)
}
graph.data.generate() ->qq
graph.data.generate <- function(fraction = 0.1, p = 1000, n = 100, b.values = rep(2,50)){
data <- list()
precision <- ggm.simulate.pcor(p,fraction)
data$X <- ggm.simulate.data(n, prec)
beta <- c(b.values,rep(0,times=p-length(b.values)))
probs <- round(1/(1+(exp(-data$X%*%beta))),digits=4)
data$Y <- rbinom(n,1,probs)
return(data)
}
graph.data.generate() ->qq
qq$X
qq$Y
sum(qq$Y)
mcmm.glmnet(graph.data.generate)
system.time(mcmm.glmnet(graph.data.generate))
library(GeneNet)
library(mc.glmnet)
library(devtools)
devtools::document()
